# inventory/signals.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from decimal import Decimal
import logging
from inventory.models import StockHistory, Stock, SizeInfo, ProductBatch, FinancialSummary
from analytics.models import CashRegister, CashHistory
from sales.models import TransactionItem, Transaction
from django.db.models import Sum, Count, F

logger = logging.getLogger(__name__)

print("üîÑ Loading inventory signals...")


@receiver(pre_save, sender=Transaction)
def track_original_status(sender, instance, **kwargs):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    """
    if instance.pk:
        try:
            old = Transaction.objects.get(pk=instance.pk)
            instance._old_status = old.status
        except Transaction.DoesNotExist:
            instance._old_status = None
    else:
        instance._old_status = None


@receiver(post_save, sender=Transaction)
def handle_transaction_complete(sender, instance, created, **kwargs):
    """
    ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —Å–∏–≥–Ω–∞–ª –¥–ª—è Transaction - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–Å
    """
    old_status = getattr(instance, "_old_status", None)
    
    print(f"üîî Transaction signal ID={instance.id}, created={created}, status={instance.status}, old_status={old_status}, cash={instance.cash_amount}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–∞–ª–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è completed
    became_completed = False
    
    if created and instance.status == "completed":
        became_completed = True
        print(f"‚úÖ New completed transaction {instance.id}")
    elif not created and old_status != "completed" and instance.status == "completed":
        became_completed = True
        print(f"‚úÖ Transaction became completed: {instance.id}")
    
    if became_completed:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Å—É –ø—Ä–∏ –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        if instance.cash_amount > 0:
            print(f"üí∞ Processing cash {instance.cash_amount}")
            update_cash_register_on_sale(instance)
        else:
            print(f"üí≥ No cash in transaction")
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
        update_daily_financial_summary(instance)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º
        actual_total = instance.cash_amount + instance.transfer_amount + instance.card_amount
        if abs(actual_total - instance.total_amount) > Decimal('0.01'):
            logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {instance.id}: total={instance.total_amount}, actual={actual_total}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã
    if instance.status == 'refunded' and old_status != 'refunded':
        print(f"üîÑ Processing refund for transaction {instance.id}")
        handle_transaction_refund(instance)


@receiver(post_save, sender=TransactionItem)
def track_sales_from_transaction(sender, instance, created, **kwargs):
    """
    –ö–∞–∂–¥–∞—è –ø—Ä–æ–¥–∞–∂–∞ ‚Üí –∑–∞–ø–∏—Å—å –≤ StockHistory + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞
    """
    if created and instance.transaction.status == 'completed':
        
        product = instance.product
        store = instance.store
        transaction = instance.transaction
        
        print(f"üì¶ Processing sale: {product.name} x{instance.quantity} in {store.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ –î–û –ø—Ä–æ–¥–∞–∂–∏
        stock, _ = Stock.objects.get_or_create(
            product=product, 
            store=store,
            defaults={'quantity': 0}
        )
        quantity_before = stock.quantity
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ size_snapshot
        size_instance = None
        if instance.size_snapshot:
            size_id = instance.size_snapshot.get('id')
            if size_id:
                try:
                    size_instance = SizeInfo.objects.get(id=size_id)
                except SizeInfo.DoesNotExist:
                    logger.warning(f"–†–∞–∑–º–µ—Ä {size_id} –∏–∑ snapshot –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–π
        safe_notes = f'–ü—Ä–æ–¥–∞–∂–∞ –Ω–æ–º–µ—Ä {transaction.id} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {float(instance.quantity)} —Ç–æ–≤–∞—Ä {product.name}'
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–æ–∫–∞
        StockHistory.objects.create(
            product=product,
            store=store,
            quantity_before=quantity_before,
            quantity_after=quantity_before - instance.quantity,
            quantity_change=-instance.quantity,
            operation_type='SALE',
            reference_id=f'txn_{transaction.id}_item_{instance.id}',
            user=transaction.cashier,
            size=size_instance,
            sale_price_at_time=instance.price,
            purchase_price_at_time=product.price_info['purchase_prices']['average'] if product.price_info else 0,
            notes=safe_notes  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫
        stock.quantity -= instance.quantity
        stock.save(update_fields=['quantity'])
        
        logger.info(f"‚úÖ Sale processed: {product.name} stock {quantity_before} ‚Üí {stock.quantity}")
        print(f"‚úÖ Stock updated: {quantity_before} ‚Üí {stock.quantity}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –±–∞—Ç—á–∞
        update_batch_attributes_on_sale(product, instance.quantity, size_instance, store)



def update_cash_register_on_sale(transaction):
    """
    ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Å—ã –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏
    """
    store = transaction.store
    cash_amount = transaction.cash_amount
    
    print(f"üí∞ Updating cash register: store={store.name}, amount={cash_amount}")
    
    if cash_amount <= 0:
        print("üí∞ No cash to process")
        return
    
    try:
        # –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Å—Å—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = timezone.now().date()
        cash_register = CashRegister.objects.filter(
            store=store,
            date_opened__date=today,
            is_open=True
        ).first()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Å—Å—ã - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        if not cash_register:
            print(f"üí∞ Creating new cash register for {store.name}")
            cash_register = CashRegister.objects.create(
                store=store,
                current_balance=Decimal('0.00'),
                target_balance=Decimal('0.00'),
                is_open=True,
                date_opened=timezone.now()
            )
            print(f"üí∞ Created cash register ID: {cash_register.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        existing_history = CashHistory.objects.filter(
            cash_register=cash_register,
            notes__contains=f"#{transaction.id}",
            operation_type='ADD_CASH'
        ).exists()
        
        if existing_history:
            print(f"üí∞ Transaction {transaction.id} already processed in cash register")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
        balance_before = cash_register.current_balance
        
        # ‚úÖ –ü–†–Ø–ú–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–∏–∑–±–µ–≥–∞–µ–º –º–µ—Ç–æ–¥ add_cash –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        cash_register.current_balance += cash_amount
        cash_register.save(update_fields=['current_balance', 'last_updated'])
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞—Å—Å—ã
        CashHistory.objects.create(
            cash_register=cash_register,
            operation_type='ADD_CASH',
            amount=cash_amount,
            user=transaction.cashier,
            store=store,
            notes=f"–ü—Ä–æ–¥–∞–∂–∞ {transaction.id}",
            balance_before=balance_before,
            balance_after=cash_register.current_balance
        )
        
        print(f"üí∞ Cash register updated: {balance_before} ‚Üí {cash_register.current_balance}")
        logger.info(f"‚úÖ Cash register updated: +{cash_amount}, balance: {cash_register.current_balance}")
        
    except Exception as e:
        logger.error(f"‚ùå Error updating cash register: {e}")
        print(f"‚ùå Cash register error: {e}")
        import traceback
        print(traceback.format_exc())


def update_daily_financial_summary(transaction):
    """
    ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
    """
    today = transaction.created_at.date()
    store = transaction.store
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–≤–æ–¥–∫—É –∑–∞ –¥–µ–Ω—å
    summary, created = FinancialSummary.objects.get_or_create(
        date=today,
        store=store,
        defaults={
            'cash_total': transaction.cash_amount,
            'transfer_total': transaction.transfer_amount,
            'card_total': transaction.card_amount,
            'debt_total': transaction.total_amount if transaction.payment_method == 'debt' else 0,
            'total_transactions': 1,
            'grand_total': transaction.total_amount,
            'avg_transaction': transaction.total_amount,
            'total_margin': 0,
            'margin_percentage': 0,
        }
    )
    
    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤–æ–¥–∫—É
        summary.cash_total += transaction.cash_amount
        summary.transfer_total += transaction.transfer_amount
        summary.card_total += transaction.card_amount
        if transaction.payment_method == 'debt':
            summary.debt_total += transaction.total_amount
        summary.total_transactions += 1
        summary.grand_total += transaction.total_amount
        summary.avg_transaction = summary.grand_total / summary.total_transactions
        summary.save()
    
    logger.debug(f"Financial summary updated for {store.name} on {today}")


def handle_transaction_refund(transaction):
    """
    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
    for item in transaction.items.all():
        stock, _ = Stock.objects.get_or_create(
            product=item.product,
            store=transaction.store,
            defaults={'quantity': 0}
        )
        
        old_quantity = stock.quantity
        stock.quantity += item.quantity
        stock.save(update_fields=['quantity'])
        
        # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–π
        safe_refund_notes = f'–í–æ–∑–≤—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–æ–º–µ—Ä {transaction.id}'
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        StockHistory.objects.create(
            product=item.product,
            store=transaction.store,
            quantity_before=old_quantity,
            quantity_after=stock.quantity,
            quantity_change=item.quantity,
            operation_type='RETURN',
            reference_id=f'refund_{transaction.id}_item_{item.id}',
            user=transaction.cashier,
            notes=safe_refund_notes  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ –∏–∑ –∫–∞—Å—Å—ã
    if transaction.cash_amount > 0:
        handle_cash_refund(transaction)


def handle_cash_refund(transaction):
    """
    ‚úÖ –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö –∏–∑ –∫–∞—Å—Å—ã
    """
    store = transaction.store
    refund_amount = transaction.cash_amount
    
    today = timezone.now().date()
    cash_register = CashRegister.objects.filter(
        store=store,
        date_opened__date=today,
        is_open=True
    ).first()
    
    if not cash_register:
        logger.error(f"No open cash register for refund {refund_amount}")
        return
    
    try:
        if cash_register.current_balance >= refund_amount:
            balance_before = cash_register.current_balance
            cash_register.current_balance -= refund_amount
            cash_register.save(update_fields=['current_balance', 'last_updated'])
            
            CashHistory.objects.create(
                cash_register=cash_register,
                operation_type='WITHDRAW',
                amount=refund_amount,
                user=transaction.cashier,
                store=store,
                notes=f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction.id}",
                balance_before=balance_before,
                balance_after=cash_register.current_balance
            )
            
            logger.info(f"Cash refund processed: -{refund_amount}")
        else:
            logger.error(f"Insufficient cash for refund: need {refund_amount}, have {cash_register.current_balance}")
    except Exception as e:
        logger.error(f"Error processing cash refund: {e}")


def update_batch_attributes_on_sale(product, sold_quantity, size_instance, store):
    """
    ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º –±–∞—Ç—á–∞
    """
    active_batches = ProductBatch.objects.filter(
        product=product,
        store=store,
        quantity__gt=0
    )
    
    if not active_batches.exists():
        return
    
    total_available = sum(batch.quantity for batch in active_batches)
    if total_available == 0:
        return
    
    remaining_to_sell = sold_quantity
    for batch in active_batches:
        if remaining_to_sell <= 0:
            break
            
        batch_share = min(batch.quantity, remaining_to_sell)
        batch.quantity -= batch_share
        batch.save(update_fields=['quantity'])
        remaining_to_sell -= batch_share


print("‚úÖ Inventory signals loaded successfully")