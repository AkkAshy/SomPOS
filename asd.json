{
	"info": {
		"_postman_id": "inventory-system-complete",
		"name": "Inventory Management System - Complete API",
		"description": "–ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤, —Ä–∞–∑–º–µ—Ä–æ–≤, –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, –ø—Ä–æ–¥–∞–∂ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000/api",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "store_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "current_user_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üè™ STORE MANAGEMENT",
			"item": [
				{
					"name": "1. Store Registration (–±–µ–∑ auth)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testadmin\",\n  \"password\": \"secure123\",\n  \"email\": \"admin@teststore.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"phone\": \"+998901234567\",\n  \"store_name\": \"My Test Store\",\n  \"store_address\": \"123 Main Street, Tashkent\",\n  \"store_phone\": \"+998901234568\",\n  \"store_email\": \"store@teststore.com\",\n  \"store_description\": \"Test store for development\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/stores/register/",
							"host": ["{{base_url}}"],
							"path": ["stores", "register", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('access_token', response.tokens.access);",
									"    pm.collectionVariables.set('refresh_token', response.tokens.refresh);",
									"    pm.collectionVariables.set('store_id', response.store.id);",
									"    pm.collectionVariables.set('current_user_id', response.user.id);",
									"    console.log('Store registered successfully!');",
									"    console.log('Store ID:', response.store.id);",
									"    console.log('Access Token set');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "2. Login (–ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"testadmin\",\n  \"password\": \"secure123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/login/",
							"host": ["{{base_url}}"],
							"path": ["users", "login", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('access_token', response.access);",
									"    pm.collectionVariables.set('refresh_token', response.refresh);",
									"    pm.collectionVariables.set('store_id', response.current_store.id);",
									"    pm.collectionVariables.set('current_user_id', response.user.id);",
									"    console.log('Login successful!');",
									"    console.log('Store:', response.current_store.name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "3. Get Store List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stores/",
							"host": ["{{base_url}}"],
							"path": ["stores", ""]
						}
					},
					"response": []
				},
				{
					"name": "4. Get Current Store",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stores/current/",
							"host": ["{{base_url}}"],
							"path": ["stores", "current", ""]
						}
					},
					"response": []
				},
				{
					"name": "5. Create Employee",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"cashier1\",\n  \"email\": \"cashier1@teststore.com\",\n  \"password\": \"cashier123\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"phone\": \"+998901234569\",\n  \"sex\": \"female\",\n  \"store_role\": \"cashier\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/stores/create-user/",
							"host": ["{{base_url}}"],
							"path": ["stores", "create-user", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• USER MANAGEMENT",
			"item": [
				{
					"name": "1. Get User Profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/profile/",
							"host": ["{{base_url}}"],
							"path": ["users", "profile", ""]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Store Employees",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/users/",
							"host": ["{{base_url}}"],
							"path": ["users", "users", ""]
						}
					},
					"response": []
				},
				{
					"name": "3. Update Employee",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"Jane Updated\",\n  \"phone\": \"+998901234570\",\n  \"password\": \"newpassword123\",\n  \"role\": \"manager\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/users/{{current_user_id}}/",
							"host": ["{{base_url}}"],
							"path": ["users", "users", "{{current_user_id}}", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üì¶ INVENTORY - CATEGORIES",
			"item": [
				{
					"name": "1. Create Category",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/categories/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "categories", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('category_id', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "2. Get Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/categories/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "categories", ""]
						}
					},
					"response": []
				},
				{
					"name": "3. Create More Categories",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"–û–¥–µ–∂–¥–∞\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/categories/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "categories", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìè INVENTORY - SIZE INFO",
			"item": [
				{
					"name": "1. Create Size Info - Pipes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"size\": \"1/2\\\"\",\n  \"dimension1\": 15,\n  \"dimension2\": 20,\n  \"dimension3\": 2.5,\n  \"dimension1_label\": \"–í–Ω—É—Ç—Ä. –¥–∏–∞–º–µ—Ç—Ä (–º–º)\",\n  \"dimension2_label\": \"–í–Ω–µ—à–Ω. –¥–∏–∞–º–µ—Ç—Ä (–º–º)\",\n  \"dimension3_label\": \"–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ (–º–º)\",\n  \"description\": \"–¢—Ä—É–±–∞ –ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω–æ–≤–∞—è\",\n  \"sort_order\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/size-info/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "size-info", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('size_id_half_inch', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "2. Create Size Info - Clothing Sizes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"size\": \"M\",\n  \"dimension1\": 90,\n  \"dimension2\": 70,\n  \"dimension3\": 65,\n  \"dimension1_label\": \"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)\",\n  \"dimension2_label\": \"–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º)\",\n  \"dimension3_label\": \"–î–ª–∏–Ω–∞ (—Å–º)\",\n  \"description\": \"–†–∞–∑–º–µ—Ä M –¥–ª—è –æ–¥–µ–∂–¥—ã\",\n  \"sort_order\": 2\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/size-info/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "size-info", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('size_id_m', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "3. Create Size L",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"size\": \"L\",\n  \"dimension1\": 95,\n  \"dimension2\": 75,\n  \"dimension3\": 67,\n  \"dimension1_label\": \"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ (—Å–º)\",\n  \"dimension2_label\": \"–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (—Å–º)\",\n  \"dimension3_label\": \"–î–ª–∏–Ω–∞ (—Å–º)\",\n  \"description\": \"–†–∞–∑–º–µ—Ä L –¥–ª—è –æ–¥–µ–∂–¥—ã\",\n  \"sort_order\": 3\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/size-info/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "size-info", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('size_id_l', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "4. Get All Sizes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/size-info/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "size-info", ""]
						}
					},
					"response": []
				},
				{
					"name": "5. Import Standard Pipe Sizes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"pipes\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/size-info/import_standard_sizes/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "size-info", "import_standard_sizes", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üõ†Ô∏è INVENTORY - CUSTOM UNITS",
			"item": [
				{
					"name": "1. Create Custom Unit - –ú–µ—Ç—Ä –ø–æ–≥–æ–Ω–Ω—ã–π",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"–ú–µ—Ç—Ä –ø–æ–≥–æ–Ω–Ω—ã–π\",\n  \"short_name\": \"–º.–ø.\",\n  \"allow_decimal\": true,\n  \"min_quantity\": 0.1,\n  \"step\": 0.01\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/custom-units/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "custom-units", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('custom_unit_meter_id', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "2. Get Custom Units Presets",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/custom-units/presets/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "custom-units", "presets", ""]
						}
					},
					"response": []
				},
				{
					"name": "3. Get All Custom Units",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/custom-units/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "custom-units", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üì¶ INVENTORY - PRODUCTS",
			"item": [
				{
					"name": "1. Create Simple Product (system unit)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"–ë–æ–ª—Ç M8x20\",\n  \"category\": {{category_id}},\n  \"unit_type\": \"piece\",\n  \"sale_price\": 500.00,\n  \"has_sizes\": false,\n  \"batch_info\": {\n    \"quantity\": 100,\n    \"purchase_price\": 300.00,\n    \"supplier\": \"–ú–µ—Ç–∏–∑—ã –û–û–û\",\n    \"expiration_date\": null\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/products/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('product_bolt_id', response.product.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "2. Create Product with Custom Unit",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"–ö–∞–±–µ–ª—å –í–í–ì 3—Ö2.5\",\n  \"category\": {{category_id}},\n  \"custom_unit_id\": {{custom_unit_meter_id}},\n  \"sale_price\": 2500.00,\n  \"has_sizes\": false,\n  \"batch_info\": {\n    \"quantity\": 50.5,\n    \"purchase_price\": 1800.00,\n    \"supplier\": \"–≠–ª–µ–∫—Ç—Ä–æ –¢–æ—Ä–≥\",\n    \"expiration_date\": null\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/products/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('product_cable_id', response.product.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "3. Create Product with Size",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"–§—É—Ç–±–æ–ª–∫–∞ –ë–∞–∑–æ–≤–∞—è - M\",\n  \"category\": 2,\n  \"unit_type\": \"piece\",\n  \"sale_price\": 25000.00,\n  \"has_sizes\": true,\n  \"default_size_id\": {{size_id_m}},\n  \"available_size_ids\": [{{size_id_m}}, {{size_id_l}}],\n  \"batch_info\": {\n    \"quantity\": 20,\n    \"purchase_price\": 15000.00,\n    \"supplier\": \"–¢–µ–∫—Å—Ç–∏–ª—å –ü–ª—é—Å\",\n    \"expiration_date\": null\n  },\n  \"size_id\": {{size_id_m}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/products/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('product_tshirt_m_id', response.product.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "4. Create Multi-Size Products",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"–î–∂–∏–Ω—Å—ã –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ\",\n  \"category\": 2,\n  \"unit_type\": \"piece\",\n  \"sale_price\": 45000.00,\n  \"batch_info\": [\n    {\n      \"size_id\": {{size_id_m}},\n      \"quantity\": 15,\n      \"purchase_price\": 28000.00,\n      \"supplier\": \"Fashion Import\",\n      \"expiration_date\": null\n    },\n    {\n      \"size_id\": {{size_id_l}},\n      \"quantity\": 12,\n      \"purchase_price\": 28000.00,\n      \"supplier\": \"Fashion Import\",\n      \"expiration_date\": null\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/products/create_multi_size/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", "create_multi_size", ""]
						}
					},
					"response": []
				},
				{
					"name": "5. Scan Barcode",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/products/scan_barcode/?barcode=1234567890123",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", "scan_barcode", ""],
							"query": [
								{
									"key": "barcode",
									"value": "1234567890123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Get All Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/products/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", ""]
						}
					},
					"response": []
				},
				{
					"name": "7. Get Units Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/products/units_info/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", "units_info", ""]
						}
					},
					"response": []
				},
				{
					"name": "8. Get Product Sizes Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/products/product_sizes_info/?name=–§—É—Ç–±–æ–ª–∫–∞",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", "product_sizes_info", ""],
							"query": [
								{
									"key": "name",
									"value": "–§—É—Ç–±–æ–ª–∫–∞"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Check Product Sizes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product_names\": [\"–§—É—Ç–±–æ–ª–∫–∞\", \"–î–∂–∏–Ω—Å—ã\", \"–ü–ª–∞—Ç—å–µ\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/products/check_sizes/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", "check_sizes", ""]
						}
					},
					"response": []
				},
				{
					"name": "10. Get Pricing Analysis",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/products/pricing_analysis/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", "pricing_analysis", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üì¶ INVENTORY - BATCHES",
			"item": [
				{
					"name": "1. Create Product Batch",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"product\": {{product_bolt_id}},\n  \"quantity\": 50,\n  \"purchase_price\": 280.00,\n  \"supplier\": \"–ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫\",\n  \"invoice_number\": \"INV-2024-001\",\n  \"expiration_date\": \"2025-12-31\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/batches/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "batches", ""]
						}
					},
					"response": []
				},
				{
					"name": "2. Get All Batches",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/batches/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "batches", ""]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Expiring Soon Batches",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/batches/expiring_soon/?days=30",
							"host": ["{{base_url}}"],
							"path": ["inventory", "batches", "expiring_soon", ""],
							"query": [
								{
									"key": "days",
									"value": "30"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä INVENTORY - STOCK",
			"item": [
				{
					"name": "1. Get Stock List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/stock/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "stock", ""]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Stock Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/stock/summary/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "stock", "summary", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• CUSTOMERS",
			"item": [
				{
					"name": "1. Create Customer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤\",\n  \"phone\": \"+998901234571\",\n  \"debt\": 0\n}"
						},
						"url": {
							"raw": "{{base_url}}/customers/",
							"host": ["{{base_url}}"],
							"path": ["customers", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('customer_id', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "2. Get All Customers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/?page=all",
							"host": ["{{base_url}}"],
							"path": ["customers", ""],
							"query": [
								{
									"key": "page",
									"value": "all"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Search Customers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/?q=–ê–ª–µ–∫—Å–µ–π",
							"host": ["{{base_url}}"],
							"path": ["customers", ""],
							"query": [
								{
									"key": "q",
									"value": "–ê–ª–µ–∫—Å–µ–π"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Get Customers with Debt",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/with_debt/",
							"host": ["{{base_url}}"],
							"path": ["customers", "with_debt", ""]
						}
					},
					"response": []
				},
				{
					"name": "5. Get Customer Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/statistics/",
							"host": ["{{base_url}}"],
							"path": ["customers", "statistics", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üí∞ SALES",
			"item": [
				{
					"name": "1. Create Sale (Cash)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payment_method\": \"cash\",\n  \"items\": [\n    {\n      \"product_id\": {{product_bolt_id}},\n      \"quantity\": 5\n    },\n    {\n      \"product_id\": {{product_cable_id}},\n      \"quantity\": 2.5\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/sales/transactions/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('transaction_id', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "2. Create Sale with Customer (Debt)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payment_method\": \"debt\",\n  \"customer\": {{customer_id}},\n  \"items\": [\n    {\n      \"product_id\": {{product_tshirt_m_id}},\n      \"quantity\": 2\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/sales/transactions/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", ""]
						}
					},
					"response": []
				},
				{
					"name": "3. Create Sale with New Customer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payment_method\": \"card\",\n  \"new_customer\": {\n    \"full_name\": \"–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞\",\n    \"phone\": \"+998901234572\"\n  },\n  \"items\": [\n    {\n      \"product_id\": {{product_bolt_id}},\n      \"quantity\": 3\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/sales/transactions/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", ""]
						}
					},
					"response": []
				},
				{
					"name": "4. Get All Transactions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sales/transactions/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", ""]
						}
					},
					"response": []
				},
				{
					"name": "5. Get Today Sales",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sales/transactions/today_sales/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", "today_sales", ""]
						}
					},
					"response": []
				},
				{
					"name": "6. Get Sales Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sales/transactions/statistics/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", "statistics", ""]
						}
					},
					"response": []
				},
				{
					"name": "7. Get Cashier Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sales/cashier-summary/",
							"host": ["{{base_url}}"],
							"path": ["sales", "cashier-summary", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìà ANALYTICS",
			"item": [
				{
					"name": "1. Get Financial Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/analytics/sales/financial_summary/",
							"host": ["{{base_url}}"],
							"path": ["analytics", "sales", "financial_summary", ""]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Financial Summary with Filters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/analytics/sales/financial_summary/?start_date=2024-01-01&end_date=2024-12-31",
							"host": ["{{base_url}}"],
							"path": ["analytics", "sales", "financial_summary", ""],
							"query": [
								{
									"key": "start_date",
									"value": "2024-01-01"
								},
								{
									"key": "end_date",
									"value": "2024-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Purchases Detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/analytics/sales/purchases_detail/",
							"host": ["{{base_url}}"],
							"path": ["analytics", "sales", "purchases_detail", ""]
						}
					},
					"response": []
				},
				{
					"name": "4. Get Top Products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/analytics/products/top_products/?limit=10",
							"host": ["{{base_url}}"],
							"path": ["analytics", "products", "top_products", ""],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get Top Customers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/analytics/customers/top_customers/?limit=5",
							"host": ["{{base_url}}"],
							"path": ["analytics", "customers", "top_customers", ""],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Get Transaction History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sales/transaction-history/?limit=10&offset=0",
							"host": ["{{base_url}}"],
							"path": ["sales", "transaction-history", ""],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Get Transactions by Day",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/analytics/transactions-by-day/?date_from=2024-01-01&date_to=2024-12-31",
							"host": ["{{base_url}}"],
							"path": ["analytics", "transactions-by-day", ""],
							"query": [
								{
									"key": "date_from",
									"value": "2024-01-01"
								},
								{
									"key": "date_to",
									"value": "2024-12-31"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä INVENTORY STATISTICS",
			"item": [
				{
					"name": "1. Get Inventory Stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/inventory/stats/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "stats", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîß DEBUG & TESTING",
			"item": [
				{
					"name": "1. Debug Store Access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stores/debug-access/",
							"host": ["{{base_url}}"],
							"path": ["stores", "debug-access", ""]
						}
					},
					"response": []
				},
				{
					"name": "2. Debug Token Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stores/debug-token/",
							"host": ["{{base_url}}"],
							"path": ["stores", "debug-token", ""]
						}
					},
					"response": []
				},
				{
					"name": "3. Debug URLs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stores/debug/",
							"host": ["{{base_url}}"],
							"path": ["stores", "debug", ""]
						}
					},
					"response": []
				},
				{
					"name": "4. Refresh Token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/stores/refresh-token/",
							"host": ["{{base_url}}"],
							"path": ["stores", "refresh-token", ""]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('access_token', response.access);",
									"    pm.collectionVariables.set('refresh_token', response.refresh);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "üß™ ADVANCED TESTING",
			"item": [
				{
					"name": "1. Test Fractional Quantities Sale",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payment_method\": \"cash\",\n  \"items\": [\n    {\n      \"product_id\": {{product_cable_id}},\n      \"quantity\": 3.75\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/sales/transactions/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", ""]
						}
					},
					"response": []
				},
				{
					"name": "2. Test Custom Price (Below Markup)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payment_method\": \"cash\",\n  \"items\": [\n    {\n      \"product_id\": {{product_bolt_id}},\n      \"quantity\": 2,\n      \"price\": 250.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/sales/transactions/",
							"host": ["{{base_url}}"],
							"path": ["sales", "transactions", ""]
						}
					},
					"response": []
				},
				{
					"name": "3. Test Bulk Price Update",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"updates\": [\n    {\n      \"product_id\": {{product_bolt_id}},\n      \"sale_price\": 550.00\n    },\n    {\n      \"product_id\": {{product_cable_id}},\n      \"sale_price\": 2700.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/inventory/products/bulk_update_pricing/",
							"host": ["{{base_url}}"],
							"path": ["inventory", "products", "bulk_update_pricing", ""]
						}
					},
					"response": []
				},
				{
					"name": "4. Test Search by Phone",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/search_by_phone/?phone=+998901234571",
							"host": ["{{base_url}}"],
							"path": ["customers", "search_by_phone", ""],
							"query": [
								{
									"key": "phone",
									"value": "+998901234571"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ access_token —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è authenticated –∑–∞–ø—Ä–æ—Å–æ–≤",
					"if (pm.request.auth && pm.request.auth.type === 'bearer') {",
					"    const token = pm.collectionVariables.get('access_token');",
					"    if (!token) {",
					"        console.warn('‚ö†Ô∏è Access token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å Login —Å–Ω–∞—á–∞–ª–∞.');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Error Response:', pm.response.json());",
					"}",
					"",
					"// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401",
					"if (pm.response.code === 401) {",
					"    console.log('üîÑ Token expired, refresh needed');",
					"}"
				]
			}
		}
	]
}