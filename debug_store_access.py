# debug_store_access.py - –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ python debug_store_access.py

import os
import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sompos.settings")
django.setup()

from django.contrib.auth.models import User
from stores.models import Store, StoreEmployee
from inventory.models import Product
from customers.models import Customer
from sales.models import Transaction

def debug_store_access():
    print("=== –û–¢–õ–ê–î–ö–ê –î–û–°–¢–£–ü–ê –ö –ú–ê–ì–ê–ó–ò–ù–ê–ú ===\n")

    # 1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã
    stores = Store.objects.all()
    print(f"üìä –í—Å–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {stores.count()}")
    for store in stores:
        print(f"  üè™ {store.name} (ID: {store.id}, Owner: {store.owner.username})")

    # 2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –º–∞–≥–∞–∑–∏–Ω—ã
    users = User.objects.filter(store_memberships__isnull=False).distinct()
    print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º: {users.count()}")

    for user in users:
        print(f"\n  üë§ {user.username}:")
        memberships = StoreEmployee.objects.filter(user=user)
        for membership in memberships:
            active = "‚úÖ" if membership.is_active else "‚ùå"
            print(f"    {active} {membership.store.name} ({membership.role})")

    # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    print(f"\nüì¶ –¢–û–í–ê–†–´ –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú:")
    for store in stores:
        products = Product.objects.filter(store=store)
        print(f"  üè™ {store.name}: {products.count()} —Ç–æ–≤–∞—Ä–æ–≤")
        if products.exists():
            for product in products[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
                print(f"    - {product.name} (ID: {product.id})")

    # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    print(f"\nüë• –ö–õ–ò–ï–ù–¢–´ –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú:")
    for store in stores:
        customers = Customer.objects.filter(store=store)
        print(f"  üè™ {store.name}: {customers.count()} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        if customers.exists():
            for customer in customers[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 3
                print(f"    - {customer.full_name} (ID: {customer.id})")

    # 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    print(f"\nüí∞ –ü–†–û–î–ê–ñ–ò –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú:")
    for store in stores:
        transactions = Transaction.objects.filter(store=store)
        print(f"  üè™ {store.name}: {transactions.count()} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    # 6. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞?
    print(f"\nüö® –ü–†–û–í–ï–†–ö–ê –ù–ê –î–ê–ù–ù–´–ï –ë–ï–ó –ú–ê–ì–ê–ó–ò–ù–ê:")

    products_without_store = Product.objects.filter(store__isnull=True)
    print(f"  üì¶ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞: {products_without_store.count()}")
    if products_without_store.exists():
        print("    ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê! –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞:")
        for product in products_without_store[:5]:
            print(f"      - {product.name} (ID: {product.id})")

    customers_without_store = Customer.objects.filter(store__isnull=True)
    print(f"  üë• –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞: {customers_without_store.count()}")
    if customers_without_store.exists():
        print("    ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê! –ù–∞–π–¥–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞:")
        for customer in customers_without_store[:5]:
            print(f"      - {customer.full_name} (ID: {customer.id})")

    transactions_without_store = Transaction.objects.filter(store__isnull=True)
    print(f"  üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞: {transactions_without_store.count()}")
    if transactions_without_store.exists():
        print("    ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê! –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞:")
        for transaction in transactions_without_store[:5]:
            print(f"      - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction.id} –æ—Ç {transaction.created_at}")

def test_specific_user_access(username):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.objects.get(username=username)
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {username}")

        # –ú–∞–≥–∞–∑–∏–Ω—ã —á–µ—Ä–µ–∑ StoreEmployee
        memberships = StoreEmployee.objects.filter(user=user, is_active=True)
        print(f"  –î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {memberships.count()}")

        accessible_stores = []
        for membership in memberships:
            accessible_stores.append(membership.store)
            print(f"    üè™ {membership.store.name} ({membership.role})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∏—Ç —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if accessible_stores:
            first_store = accessible_stores[0]
            print(f"\n  üì¶ –¢–æ–≤–∞—Ä—ã –≤ –ø–µ—Ä–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ ({first_store.name}):")
            products = Product.objects.filter(store=first_store)
            print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {products.count()}")

            print(f"\n  üì¶ –¢–æ–≤–∞—Ä—ã –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:")
            all_products = Product.objects.all()
            print(f"    –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {all_products.count()}")

            if products.count() != all_products.count():
                print("    ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("    ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã!")

                # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
                other_stores = Store.objects.exclude(id=first_store.id)
                for other_store in other_stores:
                    other_products = Product.objects.filter(store=other_store)
                    if other_products.exists():
                        print(f"      üö® –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ {other_store.name}: {other_products.count()}")

    except User.DoesNotExist:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    debug_store_access()

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n" + "="*50)
    test_specific_user_access("testadmin")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # test_specific_user_access("–¥—Ä—É–≥–æ–π_–∞–¥–º–∏–Ω")