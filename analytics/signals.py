# analytics/signals.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.db import transaction
from django.db.models import Sum, F
from django.core.cache import cache
from django.utils import timezone
from sales.models import Transaction
from analytics.models import (
    SalesSummary, ProductAnalytics, CustomerAnalytics,
    UnitAnalytics, SizeAnalytics, CategoryAnalytics
)
import logging
from decimal import Decimal

logger = logging.getLogger('analytics')

@receiver(post_save, sender=Transaction)
def process_transaction_analytics(sender, instance, created, **kwargs):
    """
    ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
    """

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if instance.status != 'completed':
        logger.debug(f"‚è≠Ô∏è Skipping non-completed transaction {instance.id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    processed_key = f"analytics_processed_{instance.id}"
    if cache.get(processed_key):
        logger.info(f"‚ö†Ô∏è Analytics already processed for transaction {instance.id}")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    lock_key = f"analytics_lock_{instance.id}"
    if cache.get(lock_key):
        logger.warning(f"üîí Analytics processing is locked for transaction {instance.id}")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
    cache.set(lock_key, True, 60)

    try:
        with transaction.atomic():
            logger.info(f"üîÑ Processing analytics for transaction {instance.id} (amount: {instance.total_amount})")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            _process_sales_summary(instance)
            _process_product_analytics(instance)
            _process_unit_analytics(instance)  # ‚Üê –ù–û–í–û–ï
            _process_size_analytics(instance)  # ‚Üê –ù–û–í–û–ï
            _process_category_analytics(instance)  # ‚Üê –ù–û–í–û–ï

            if instance.customer:
                _process_customer_analytics(instance)

            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é (–Ω–∞ 24 —á–∞—Å–∞)
            cache.set(processed_key, True, 86400)

            logger.info(f"‚úÖ Analytics processed successfully for transaction {instance.id}")

    except Exception as e:
        logger.error(f"‚ùå Error processing analytics for transaction {instance.id}: {str(e)}")
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

    finally:
        # –í—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        cache.delete(lock_key)


def _process_sales_summary(instance):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–¥–∞–∂ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    date = instance.created_at.date()
    payment_method = instance.payment_method

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    items_count = instance.items.aggregate(
        total=Sum('quantity')
    )['total'] or 0

    try:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        summary = SalesSummary.objects.filter(
            store=instance.store,
            date=date,
            payment_method=payment_method
        ).first()

        if summary:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            if _is_transaction_already_included_in_summary(instance, summary):
                logger.warning(f"Transaction {instance.id} already included in SalesSummary")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            summary.total_amount += instance.total_amount
            summary.total_transactions += 1
            summary.total_items_sold += items_count
            summary.cashier = instance.cashier  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞—Å—Å–∏—Ä–∞
            summary.save()

            logger.info(f"Updated SalesSummary: +{instance.total_amount} (total: {summary.total_amount})")

        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            summary = SalesSummary.objects.create(
                store=instance.store,
                date=date,
                payment_method=payment_method,
                cashier=instance.cashier,
                total_amount=instance.total_amount,
                total_transactions=1,
                total_items_sold=items_count
            )

            logger.info(f"Created new SalesSummary: {instance.total_amount}")

    except Exception as e:
        logger.error(f"Error processing sales summary for transaction {instance.id}: {str(e)}")
        raise


def _process_product_analytics(instance):
    """
    –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —É—á–µ—Ç–æ–º –¥—Ä–æ–±–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
    """
    date = instance.created_at.date()

    try:
        for item in instance.items.all():
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            analytics = ProductAnalytics.objects.filter(
                product=item.product,
                date=date
            ).first()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ Decimal –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            item_quantity = Decimal(str(item.quantity))
            item_price = Decimal(str(item.price))
            item_revenue = item_quantity * item_price

            if analytics:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if _is_item_already_included_in_product_analytics(item, analytics, date):
                    logger.warning(f"Item {item.product.name} from transaction {instance.id} already included")
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                analytics.quantity_sold += item_quantity
                analytics.revenue += item_revenue
                analytics.cashier = instance.cashier
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
                if analytics.quantity_sold > 0:
                    analytics.average_unit_price = analytics.revenue / analytics.quantity_sold
                
                analytics.save()

                logger.debug(f"Updated ProductAnalytics for {item.product.name}: +{item_quantity} {item.product.unit_display}")

            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                analytics = ProductAnalytics.objects.create(
                    product=item.product,
                    date=date,
                    cashier=instance.cashier,
                    quantity_sold=item_quantity,
                    revenue=item_revenue,
                    average_unit_price=item_price
                )

                logger.debug(f"Created ProductAnalytics for {item.product.name}: {item_quantity} {item.product.unit_display}")

    except Exception as e:
        logger.error(f"Error processing product analytics for transaction {instance.id}: {str(e)}")
        raise


def _process_unit_analytics(instance):
    """
    –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
    """
    date = instance.created_at.date()

    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        unit_groups = {}
        
        for item in instance.items.all():
            product = item.product
            unit_key = (product.unit_type or 'custom', product.unit_display)
            
            if unit_key not in unit_groups:
                unit_groups[unit_key] = {
                    'unit_type': product.unit_type or 'custom',
                    'unit_display': product.unit_display,
                    'is_custom': product.custom_unit is not None,
                    'quantity': Decimal('0'),
                    'revenue': Decimal('0'),
                    'products': set(),
                    'transactions': 1
                }
            
            item_quantity = Decimal(str(item.quantity))
            item_revenue = item_quantity * Decimal(str(item.price))
            
            unit_groups[unit_key]['quantity'] += item_quantity
            unit_groups[unit_key]['revenue'] += item_revenue
            unit_groups[unit_key]['products'].add(product.id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        for unit_key, unit_data in unit_groups.items():
            unit_type = unit_data['unit_type']
            unit_display = unit_data['unit_display']
            
            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics, created = UnitAnalytics.objects.get_or_create(
                store=instance.store,
                date=date,
                unit_type=unit_type,
                unit_display=unit_display,
                defaults={
                    'is_custom': unit_data['is_custom'],
                    'total_quantity_sold': unit_data['quantity'],
                    'total_revenue': unit_data['revenue'],
                    'products_count': len(unit_data['products']),
                    'transactions_count': 1
                }
            )
            
            if not created:
                analytics.total_quantity_sold += unit_data['quantity']
                analytics.total_revenue += unit_data['revenue']
                analytics.products_count = len(set(list(analytics.products_count) + list(unit_data['products'])))
                analytics.transactions_count += 1
                analytics.save()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            analytics.calculate_metrics()
            analytics.save()

            logger.debug(f"Processed UnitAnalytics for {unit_display}: +{unit_data['quantity']}")

    except Exception as e:
        logger.error(f"Error processing unit analytics for transaction {instance.id}: {str(e)}")
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞


def _process_size_analytics(instance):
    """
    –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
    """
    date = instance.created_at.date()

    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        size_groups = {}
        
        for item in instance.items.all():
            product = item.product
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
            if not product.has_sizes or not product.default_size:
                continue
                
            size_info = product.default_size
            size_key = size_info.size
            
            if size_key not in size_groups:
                size_groups[size_key] = {
                    'size_name': size_info.size,
                    'dimension1': size_info.dimension1,
                    'dimension2': size_info.dimension2,
                    'dimension3': size_info.dimension3,
                    'dimension1_label': size_info.dimension1_label,
                    'dimension2_label': size_info.dimension2_label,
                    'dimension3_label': size_info.dimension3_label,
                    'quantity': Decimal('0'),
                    'revenue': Decimal('0'),
                    'products': set(),
                    'transactions': 1
                }
            
            item_quantity = Decimal(str(item.quantity))
            item_revenue = item_quantity * Decimal(str(item.price))
            
            size_groups[size_key]['quantity'] += item_quantity
            size_groups[size_key]['revenue'] += item_revenue
            size_groups[size_key]['products'].add(product.id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä
        for size_key, size_data in size_groups.items():
            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics, created = SizeAnalytics.objects.get_or_create(
                store=instance.store,
                date=date,
                size_name=size_data['size_name'],
                defaults={
                    'dimension1': size_data['dimension1'],
                    'dimension2': size_data['dimension2'],
                    'dimension3': size_data['dimension3'],
                    'dimension1_label': size_data['dimension1_label'],
                    'dimension2_label': size_data['dimension2_label'],
                    'dimension3_label': size_data['dimension3_label'],
                    'total_quantity_sold': size_data['quantity'],
                    'total_revenue': size_data['revenue'],
                    'products_count': len(size_data['products']),
                    'transactions_count': 1
                }
            )
            
            if not created:
                analytics.total_quantity_sold += size_data['quantity']
                analytics.total_revenue += size_data['revenue']
                analytics.transactions_count += 1
                analytics.save()

            logger.debug(f"Processed SizeAnalytics for {size_key}: +{size_data['quantity']}")

    except Exception as e:
        logger.error(f"Error processing size analytics for transaction {instance.id}: {str(e)}")
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞


def _process_category_analytics(instance):
    """
    –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    date = instance.created_at.date()

    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_groups = {}
        
        for item in instance.items.all():
            product = item.product
            category = product.category
            category_id = category.id
            
            if category_id not in category_groups:
                category_groups[category_id] = {
                    'category': category,
                    'quantity': Decimal('0'),
                    'revenue': Decimal('0'),
                    'products': set(),
                    'transactions': 1
                }
            
            item_quantity = Decimal(str(item.quantity))
            item_revenue = item_quantity * Decimal(str(item.price))
            
            category_groups[category_id]['quantity'] += item_quantity
            category_groups[category_id]['revenue'] += item_revenue
            category_groups[category_id]['products'].add(product.id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for category_id, category_data in category_groups.items():
            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics, created = CategoryAnalytics.objects.get_or_create(
                store=instance.store,
                date=date,
                category=category_data['category'],
                defaults={
                    'total_quantity_sold': category_data['quantity'],
                    'total_revenue': category_data['revenue'],
                    'products_count': len(category_data['products']),
                    'transactions_count': 1,
                    'unique_products_sold': len(category_data['products'])
                }
            )
            
            if not created:
                analytics.total_quantity_sold += category_data['quantity']
                analytics.total_revenue += category_data['revenue']
                analytics.transactions_count += 1
                # –û–±–Ω–æ–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞)
                analytics.save()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            analytics.calculate_metrics()
            analytics.save()

            logger.debug(f"Processed CategoryAnalytics for {category_data['category'].name}: +{category_data['revenue']}")

    except Exception as e:
        logger.error(f"Error processing category analytics for transaction {instance.id}: {str(e)}")
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞


def _process_customer_analytics(instance):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    """
    date = instance.created_at.date()
    debt_amount = instance.total_amount if instance.payment_method == 'debt' else Decimal('0.00')

    try:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        analytics = CustomerAnalytics.objects.filter(
            customer=instance.customer,
            date=date
        ).first()

        if analytics:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if _is_transaction_already_included_in_customer_analytics(instance, analytics):
                logger.warning(f"Transaction {instance.id} already included in CustomerAnalytics")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            analytics.total_purchases += instance.total_amount
            analytics.transaction_count += 1
            analytics.debt_added += debt_amount
            analytics.cashier = instance.cashier
            analytics.save()

            logger.debug(f"Updated CustomerAnalytics for {instance.customer.full_name}")

        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            analytics = CustomerAnalytics.objects.create(
                customer=instance.customer,
                date=date,
                cashier=instance.cashier,
                total_purchases=instance.total_amount,
                transaction_count=1,
                debt_added=debt_amount
            )

            logger.debug(f"Created CustomerAnalytics for {instance.customer.full_name}")

    except Exception as e:
        logger.error(f"Error processing customer analytics for transaction {instance.id}: {str(e)}")
        raise


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def _is_transaction_already_included_in_summary(instance, summary):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ —Å–≤–æ–¥–∫—É
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å —ç—Ç–∏–º –º–µ—Ç–æ–¥–æ–º –æ–ø–ª–∞—Ç—ã, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
        other_transactions = Transaction.objects.filter(
            store=instance.store,
            created_at__date=summary.date,
            payment_method=summary.payment_method,
            status='completed'
        ).exclude(id=instance.id)

        # –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –±–µ–∑ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        expected_amount = other_transactions.aggregate(
            total=Sum('total_amount')
        )['total'] or Decimal('0.00')

        # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –≤ —Å–≤–æ–¥–∫–µ –º–∏–Ω—É—Å —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        current_minus_this = summary.total_amount - instance.total_amount

        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 1 –∫–æ–ø–µ–π–∫–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —É—á—Ç–µ–Ω–∞
        return abs(current_minus_this - expected_amount) < Decimal('0.01')

    except Exception as e:
        logger.error(f"Error checking transaction inclusion: {str(e)}")
        return False


def _is_item_already_included_in_product_analytics(item, analytics, date):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    """
    try:
        from sales.models import TransactionItem

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞ –¥–µ–Ω—å, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        other_items = TransactionItem.objects.filter(
            transaction__store=item.transaction.store,
            transaction__created_at__date=date,
            transaction__status='completed',
            product=item.product
        ).exclude(transaction_id=item.transaction.id)

        # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        expected_quantity = other_items.aggregate(
            total=Sum('quantity')
        )['total'] or 0

        # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
        current_minus_this = analytics.quantity_sold - Decimal(str(item.quantity))

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç–æ–≤–∞—Ä —É–∂–µ —É—á—Ç–µ–Ω
        return abs(current_minus_this - Decimal(str(expected_quantity))) < Decimal('0.001')

    except Exception as e:
        logger.error(f"Error checking item inclusion: {str(e)}")
        return False


def _is_transaction_already_included_in_customer_analytics(instance, analytics):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –¥–µ–Ω—å, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
        other_transactions = Transaction.objects.filter(
            store=instance.store,
            created_at__date=analytics.date,
            customer=instance.customer,
            status='completed'
        ).exclude(id=instance.id)

        # –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –±–µ–∑ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        expected_amount = other_transactions.aggregate(
            total=Sum('total_amount')
        )['total'] or Decimal('0.00')

        # –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –º–∏–Ω—É—Å —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        current_minus_this = analytics.total_purchases - instance.total_amount

        # –ï—Å–ª–∏ —Å—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —É—á—Ç–µ–Ω–∞
        return abs(current_minus_this - expected_amount) < Decimal('0.01')

    except Exception as e:
        logger.error(f"Error checking customer transaction inclusion: {str(e)}")
        return False