# test_users.py - –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

import os
import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sompos.settings")
django.setup()

from django.contrib.auth.models import User
from stores.models import Store, StoreEmployee
from inventory.models import Product
from customers.models import Customer
from sales.models import Transaction

def test_user_access(username):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = User.objects.get(username=username)
        print(f"\nüîç –¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {username}")
        print(f"  ID: {user.id}")
        print(f"  –ì—Ä—É–ø–ø—ã: {list(user.groups.values_list('name', flat=True))}")
        print(f"  –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.is_superuser}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        memberships = StoreEmployee.objects.filter(user=user, is_active=True)
        print(f"  –î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: {memberships.count()}")

        accessible_stores = []
        for membership in memberships:
            accessible_stores.append(membership.store)
            print(f"    üè™ {membership.store.name} (—Ä–æ–ª—å: {membership.role})")

        if not accessible_stores:
            print("  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É")
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
        current_store = accessible_stores[0]
        print(f"\n  üìã –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –î–ê–ù–ù–´–ú (–º–∞–≥–∞–∑–∏–Ω: {current_store.name}):")

        # –¢–æ–≤–∞—Ä—ã –≤ –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–µ
        user_products = Product.objects.filter(store=current_store)
        print(f"    üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Å–≤–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ: {user_products.count()}")

        # –í–°–ï —Ç–æ–≤–∞—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        all_products = Product.objects.all()
        print(f"    üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {all_products.count()}")

        # –¢–æ–≤–∞—Ä—ã –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
        other_stores = Store.objects.exclude(id=current_store.id)
        for other_store in other_stores:
            other_products = Product.objects.filter(store=other_store)
            if other_products.count() > 0:
                print(f"    üö® –¢–æ–≤–∞—Ä—ã –≤ —á—É–∂–æ–º –º–∞–≥–∞–∑–∏–Ω–µ '{other_store.name}': {other_products.count()}")
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                for product in other_products[:3]:
                    print(f"      - {product.name} (ID: {product.id})")

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        print(f"\n  üîß –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ë–ï–ó –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
        print(f"    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã: {all_products.count()}")

        # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å Employee
        if hasattr(user, 'employee'):
            employee = user.employee
            print(f"\n  üë§ EMPLOYEE INFO:")
            print(f"    –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω: {employee.store.name if employee.store else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"    –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã: {employee.accessible_stores.count()}")
            for store in employee.accessible_stores.all():
                print(f"      - {store.name}")
        else:
            print(f"\n  ‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ Employee")

    except User.DoesNotExist:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def test_all_active_users():
    print("üß™ –¢–ï–°–¢ –í–°–ï–• –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")

    active_users = ['Shukurullo', 'akhmet08', 'azamat', 'Azaazaaza', 'akkanat223', 'axmet']

    for username in active_users:
        test_user_access(username)
        print("-" * 60)

if __name__ == "__main__":
    test_all_active_users()